import pandas as pd
a = {   "2021-03-15 00:00:00" : 10, # 24:00:00을 00:00:00으로 바꿔서 했어요.
        "2021-03-15 01:00:00" : 11,
        "2021-03-15 02:00:00" : 20,
        "2021-03-15 03:00:00" : 18,
        "2021-03-15 04:00:00" : 17,
        "2021-03-15 05:00:00" : 14,
        "2021-03-15 06:00:00" : 18,
        "2021-03-15 07:00:00" : 23,
        "2021-03-15 08:00:00" : 16,
        "2021-03-15 09:00:00" : 15,
        "2021-03-15 10:00:00" : 18,
        "2021-03-15 11:00:00" : 17,
        "2021-03-15 12:00:00" : 14,
        "2021-03-15 13:00:00" : 16,
        "2021-03-15 14:00:00" : 15,
        "2021-03-15 15:00:00" : 15,
        "2021-03-15 16:00:00" : 17,
        "2021-03-15 17:00:00" : 20,
        "2021-03-15 18:00:00" : 10,
        "2021-03-15 19:00:00" : 11,
        "2021-03-15 20:00:00" : 14,
        "2021-03-15 21:00:00" : 15,
        "2021-03-15 22:00:00" : 16,
        "2021-03-15 23:00:00" : 17,
        "2021-03-16 00:00:00" : 19,
        "2021-03-16 01:00:00" : 20,
        "2021-03-16 02:00:00" : 18,
        "2021-03-16 03:00:00" : 14,
        "2021-03-16 04:00:00" : 15,
        "2021-03-16 05:00:00" : 14,
        "2021-03-16 06:00:00" : 16,
        "2021-03-16 07:00:00" : 12,
        "2021-03-16 08:00:00" : 18,
        "2021-03-16 09:00:00" : 17,
        "2021-03-16 10:00:00" : 18,
        "2021-03-16 11:00:00" : 19,
        "2021-03-16 12:00:00" : 19,
        "2021-03-16 13:00:00" : 19,
        "2021-03-16 14:00:00" : 21,
        "2021-03-16 15:00:00" : 22,
        "2021-03-16 16:00:00" : 19,
        "2021-03-16 17:00:00" : 19,
        "2021-03-16 18:00:00" : 17,
        "2021-03-16 19:00:00" : 15,
        "2021-03-16 20:00:00" : 16,
        "2021-03-16 21:00:00" : 15,
        "2021-03-16 22:00:00" : 17,
        "2021-03-16 23:00:00" : 11,
        "2021-03-17 00:00:00" : 12,
        "2021-03-17 01:00:00" : 9,
        "2021-03-17 02:00:00" : 12,
        "2021-03-17 03:00:00" : 13,
        "2021-03-17 04:00:00" : 16,
        "2021-03-17 05:00:00" : 19,
        "2021-03-17 06:00:00" : 18,
        "2021-03-17 07:00:00" : 17,
        "2021-03-17 08:00:00" : 18,
        "2021-03-17 09:00:00" : 15,
        "2021-03-17 10:00:00" : 14,
        "2021-03-17 11:00:00" : 11,
        "2021-03-17 12:00:00" : 12,
        "2021-03-17 13:00:00" : 12,
        "2021-03-17 14:00:00" : 10,
        "2021-03-17 15:00:00" : 17,
        "2021-03-17 16:00:00" : 14,
        "2021-03-17 17:00:00" : 17,
        "2021-03-17 18:00:00" : 15,
        "2021-03-17 19:00:00" : 16,
        "2021-03-17 20:00:00" : 15,
        "2021-03-17 21:00:00" : 19,
        "2021-03-17 22:00:00" : 18,
        "2021-03-17 23:00:00" : 17,
        "2021-03-18 00:00:00" : 15,
        "2021-03-18 01:00:00" : 15,
        "2021-03-18 02:00:00" : 15,
        "2021-03-18 03:00:00" : 14,
        "2021-03-18 04:00:00" : 15,
        "2021-03-18 05:00:00" : 17,
        "2021-03-18 06:00:00" : 15,
        "2021-03-18 07:00:00" : 16,
        "2021-03-18 08:00:00" : 15,
        "2021-03-18 09:00:00" : 15,
        "2021-03-18 10:00:00" : 15,
        "2021-03-18 11:00:00" : 20,
        "2021-03-18 12:00:00" : 15,
        "2021-03-18 13:00:00" : 21,
        "2021-03-18 14:00:00" : 22,
        "2021-03-18 15:00:00" : 24,
        "2021-03-18 16:00:00" : 12,
        "2021-03-18 17:00:00" : 26,
        "2021-03-18 18:00:00" : 20,
        "2021-03-18 19:00:00" : 12,
        "2021-03-18 20:00:00" : 14,
        "2021-03-18 21:00:00" : 12,
        "2021-03-18 22:00:00" : 16,
        "2021-03-18 23:00:00" : 17,
        "2021-03-19 00:00:00" : 14,
        "2021-03-19 01:00:00" : 2
    }
# 방법 1

day, temp = list(a), list(a.values()) # 데이터 프레임으로 만들기위해 데이터 추출
da = {"day":day, "tmp":temp} # 값의 속성 지정해주고, 합침
data = pd.DataFrame(da) # 데이터 프레임 형성

day_list= [] # "2021-03-19 01:00:00"에서 '2021-03-19'만 가져오기 위한 리스트
result = [] # 일 평균 온도 저장하기 위한 리스트
for i in data['day']:
    day,time = i.split(" ") # "2021-03-19 01:00:00"에서 day에는 "2021-03-19", time에는 "01:00:00" 저장됨.
    day_list.append(day) # "2021-03-19"만 리스트에 저장

day_list = sorted(list(set(day_list))) # "2021-03-15", 2021-03-16", 2021-03-17" 2021-03-18", 2021-03-19" 저장됨.

for i in range(len(day_list)):
    d = data[data['day'].str.contains(day_list[i])] # "2021-03-15" 들어 있는 행만 가져옴.
    df2 = d['tmp'].sum() / len(d) # 새로운 데이터프레임에 일 평균 온도 저장
    result.append([day_list[i], df2]) # ["2021-03-15", 일 평균 온도] 저장
result = dict(result) #딕셔너리 형태로 변환
print(result)




# 방법 2

sum_temp = 0 # 하루의 온도 다 더하기 위한 변수
cnt = 0 # 더한 시간의 개수가 24개인지 확인하기 위한 변수
result = [] #일 평균 온도를 저장하기 위한 list
for i in range(len(data)): #온도 데이터의 총 개수대로 반복문 실행
    d, t = data.iloc[i, 0].split(' ') # "2021-03-19 01:00:00"를 '2021-03-19'와 '01:00:00'으로 나눠서 저장
    h, m, s = t.split(':') # '01:00:00'를 '01', '00', '00'으로 나눠서 저장
    sum_temp +=data.iloc[i, 1] # 시간별 온도 더함
    cnt += 1 # 시간의 개수 증가
    print("횟수: ", cnt, "합계: ", sum_temp) # 확인하기 위해 출력 찍어봄
    if cnt == 24: # 만약 더한 시간의 개수가 24라면
        result.append([d, sum_temp / 24]) # result 리스트에 날짜와 일평균 온도를 추가
        cnt = 0; # 다음 날의 시간의 개수를 위해 0으로 설정
        sum_temp = 0; # 다음 날의 온도를 더하기 위해 0으로 설정
    else: continue # 시간의 개수가 24가 아니면 계속 더하기

result.append([d,sum_temp/cnt]) # 24시간의 데이터가 없는 날의 일 평균 온도는 따로 추가
result = dict(result) # dict 형태로 변환
print(result)